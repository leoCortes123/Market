// <auto-generated />
using System;
using MarketAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarketAPI.Migrations
{
    [DbContext(typeof(MarketDbContext))]
    partial class MarketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarketAPI.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK_Calendars");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("MarketAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_Categories");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Productos frescos del campo",
                            Name = "Frutas y Verduras"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Productos lácteos y huevos frescos",
                            Name = "Lácteos y Huevos"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Arroz, frijol, maíz y más",
                            Name = "Granos y Cereales"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Carnes frescas y procesadas",
                            Name = "Carnes y Embutidos"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Arepas, pan, café y más",
                            Name = "Panadería y Desayuno"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Productos varios",
                            Name = "Otros"
                        });
                });

            modelBuilder.Entity("MarketAPI.Models.Combo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id")
                        .HasName("PK_Combos");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Incluye arepas, queso y café",
                            ImageUrl = "desayuno.jpg",
                            IsActive = true,
                            Name = "Desayuno Campesino",
                            Price = 25000m
                        });
                });

            modelBuilder.Entity("MarketAPI.Models.ComboProduct", b =>
                {
                    b.Property<int>("ComboId")
                        .HasColumnType("integer")
                        .HasColumnName("ComboId");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("UnitId");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("Quantity");

                    b.HasKey("ComboId", "ProductId", "UnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("ComboProducts");

                    b.HasData(
                        new
                        {
                            ComboId = 1,
                            ProductId = 3,
                            UnitId = 1,
                            Quantity = 0.25m
                        },
                        new
                        {
                            ComboId = 1,
                            ProductId = 4,
                            UnitId = 8,
                            Quantity = 1m
                        },
                        new
                        {
                            ComboId = 1,
                            ProductId = 5,
                            UnitId = 1,
                            Quantity = 0.5m
                        });
                });

            modelBuilder.Entity("MarketAPI.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id")
                        .HasName("PK_Events");

                    b.HasIndex("CalendarId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MarketAPI.Models.MeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsWeight")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("WeightInGrams")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_MeasurementUnits");

                    b.ToTable("MeasurementUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "g",
                            IsWeight = true,
                            Name = "Gramo",
                            WeightInGrams = 1
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "kg",
                            IsWeight = true,
                            Name = "Kilogramo",
                            WeightInGrams = 1000
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "lb",
                            IsWeight = true,
                            Name = "Libra",
                            WeightInGrams = 453
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "ml",
                            IsWeight = false,
                            Name = "Mililitro"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "l",
                            IsWeight = false,
                            Name = "Litro"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "un",
                            IsWeight = false,
                            Name = "Unidad"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "doc",
                            IsWeight = false,
                            Name = "Docena"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "pq",
                            IsWeight = false,
                            Name = "Paquete"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "cj",
                            IsWeight = false,
                            Name = "Caja"
                        });
                });

            modelBuilder.Entity("MarketAPI.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_Orders");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MarketAPI.Models.OrderComboItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplierComboId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_OrderComboItems");

                    b.HasIndex("OrderId");

                    b.HasIndex("SupplierComboId");

                    b.ToTable("OrderComboItems");
                });

            modelBuilder.Entity("MarketAPI.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeasurementUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int?>("SupplierProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_OrderItems");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SupplierProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MarketAPI.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentProvider")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProviderPaymentId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id")
                        .HasName("PK_Payments");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MarketAPI.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("MeasurementUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("PK_Products");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Manzanas rojas frescas",
                            ImageUrl = "manzana.jpg",
                            IsActive = true,
                            MeasurementUnitId = 6,
                            Name = "Manzana"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Bananos maduros de exportación",
                            ImageUrl = "banano.jpg",
                            IsActive = true,
                            MeasurementUnitId = 6,
                            Name = "Banano"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Queso fresco campesino 250g",
                            ImageUrl = "queso.jpg",
                            IsActive = true,
                            MeasurementUnitId = 1,
                            Name = "Queso Campesino"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 5,
                            Description = "Arepas de maíz blanco x6 unidades",
                            ImageUrl = "arepa.jpg",
                            IsActive = true,
                            MeasurementUnitId = 8,
                            Name = "Arepa de Maíz"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Description = "Café molido 100% colombiano 500g",
                            ImageUrl = "cafe.jpg",
                            IsActive = true,
                            MeasurementUnitId = 1,
                            Name = "Café Molido"
                        });
                });

            modelBuilder.Entity("MarketAPI.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_RefreshTokens");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("MarketAPI.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BlogContent")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text");

                    b.Property<string>("ProfileBannerUrl")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_Suppliers");

                    b.HasIndex("UserId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("MarketAPI.Models.SupplierCombo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComboId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_SupplierCombos");

                    b.HasIndex("ComboId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierCombos");
                });

            modelBuilder.Entity("MarketAPI.Models.SupplierProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("MeasurementUnitId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Stock")
                        .HasColumnType("numeric");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_SupplierProducts");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitId");

                    b.ToTable("SupplierProducts");
                });

            modelBuilder.Entity("MarketAPI.Models.SupplierReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Review")
                        .HasColumnType("text");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_SupplierReviews");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("SupplierReviews");
                });

            modelBuilder.Entity("MarketAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsFarmerDistributor")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MarketAPI.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id")
                        .HasName("PK_UserRoles");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Supplier"
                        });
                });

            modelBuilder.Entity("MarketAPI.Models.UserUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserUserRoles");
                });

            modelBuilder.Entity("MarketAPI.Models.ComboProduct", b =>
                {
                    b.HasOne("MarketAPI.Models.Combo", "Combo")
                        .WithMany("ComboProducts")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAPI.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAPI.Models.MeasurementUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MarketAPI.Models.Event", b =>
                {
                    b.HasOne("MarketAPI.Models.Calendar", "Calendar")
                        .WithMany("Events")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("MarketAPI.Models.Order", b =>
                {
                    b.HasOne("MarketAPI.Models.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId");

                    b.HasOne("MarketAPI.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketAPI.Models.OrderComboItem", b =>
                {
                    b.HasOne("MarketAPI.Models.Order", "Order")
                        .WithMany("OrderComboItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAPI.Models.SupplierCombo", "SupplierCombo")
                        .WithMany()
                        .HasForeignKey("SupplierComboId");

                    b.Navigation("Order");

                    b.Navigation("SupplierCombo");
                });

            modelBuilder.Entity("MarketAPI.Models.OrderItem", b =>
                {
                    b.HasOne("MarketAPI.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("MarketAPI.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAPI.Models.SupplierProduct", "SupplierProduct")
                        .WithMany()
                        .HasForeignKey("SupplierProductId");

                    b.HasOne("MarketAPI.Models.MeasurementUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Order");

                    b.Navigation("SupplierProduct");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MarketAPI.Models.Payment", b =>
                {
                    b.HasOne("MarketAPI.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MarketAPI.Models.Product", b =>
                {
                    b.HasOne("MarketAPI.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAPI.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany("Products")
                        .HasForeignKey("MeasurementUnitId");

                    b.Navigation("Category");

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("MarketAPI.Models.RefreshToken", b =>
                {
                    b.HasOne("MarketAPI.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketAPI.Models.Supplier", b =>
                {
                    b.HasOne("MarketAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketAPI.Models.SupplierCombo", b =>
                {
                    b.HasOne("MarketAPI.Models.Combo", "Combo")
                        .WithMany("SupplierCombos")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAPI.Models.Supplier", "Supplier")
                        .WithMany("SupplierCombos")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MarketAPI.Models.SupplierProduct", b =>
                {
                    b.HasOne("MarketAPI.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("MarketAPI.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAPI.Models.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAPI.Models.MeasurementUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Product");

                    b.Navigation("Supplier");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MarketAPI.Models.SupplierReview", b =>
                {
                    b.HasOne("MarketAPI.Models.Supplier", "Supplier")
                        .WithMany("SupplierReviews")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAPI.Models.User", "User")
                        .WithMany("SupplierReviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketAPI.Models.UserUserRole", b =>
                {
                    b.HasOne("MarketAPI.Models.UserRole", "Role")
                        .WithMany("UserUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAPI.Models.User", "User")
                        .WithMany("UserUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketAPI.Models.Calendar", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MarketAPI.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketAPI.Models.Combo", b =>
                {
                    b.Navigation("ComboProducts");

                    b.Navigation("SupplierCombos");
                });

            modelBuilder.Entity("MarketAPI.Models.MeasurementUnit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketAPI.Models.Order", b =>
                {
                    b.Navigation("OrderComboItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MarketAPI.Models.Supplier", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("SupplierCombos");

                    b.Navigation("SupplierProducts");

                    b.Navigation("SupplierReviews");
                });

            modelBuilder.Entity("MarketAPI.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SupplierReviews");

                    b.Navigation("UserUserRoles");
                });

            modelBuilder.Entity("MarketAPI.Models.UserRole", b =>
                {
                    b.Navigation("UserUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
